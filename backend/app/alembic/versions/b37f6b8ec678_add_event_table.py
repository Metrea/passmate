"""Add event table

Revision ID: b37f6b8ec678
Revises: d4867f3a4c0a
Create Date: 2021-05-14 00:57:45.006918

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'b37f6b8ec678'
down_revision = 'd4867f3a4c0a'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('events_category_level1',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_events_category_level1_id'), 'events_category_level1', ['id'], unique=False)
    op.create_index(op.f('ix_events_category_level1_name'), 'events_category_level1', ['name'], unique=True)
    op.create_table('events_category_level2',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('category_level1_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['category_level1_id'], ['events_category_level1.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_events_category_level2_id'), 'events_category_level2', ['id'], unique=False)
    op.create_index(op.f('ix_events_category_level2_name'), 'events_category_level2', ['name'], unique=True)
    op.create_table('events_event',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('city_code', sa.String(), nullable=True),
    sa.Column('city_desc', sa.String(), nullable=True),
    sa.Column('classes', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('country_code', sa.String(), nullable=False),
    sa.Column('country_desc', sa.String(), nullable=True),
    sa.Column('event_desc', sa.String(), nullable=True),
    sa.Column('event_id', sa.String(), nullable=True),
    sa.Column('event_info', sa.String(), nullable=True),
    sa.Column('event_status', sa.String(), nullable=False),
    sa.Column('event_type', sa.String(), nullable=False),
    sa.Column('geo_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('has_no_perfs', sa.Boolean(), nullable=True),
    sa.Column('is_add_on', sa.Boolean(), nullable=True),
    sa.Column('is_auto_quantity_add_on', sa.Boolean(), nullable=True),
    sa.Column('is_date_matched_add_on', sa.Boolean(), nullable=True),
    sa.Column('is_seated', sa.Boolean(), nullable=True),
    sa.Column('is_time_matched_add_on', sa.Boolean(), nullable=True),
    sa.Column('need_departure_date', sa.Boolean(), nullable=True),
    sa.Column('need_duration', sa.Boolean(), nullable=True),
    sa.Column('need_performance', sa.Boolean(), nullable=True),
    sa.Column('show_perf_time', sa.Boolean(), nullable=True),
    sa.Column('category_level1_id', sa.Integer(), nullable=True),
    sa.Column('category_level2_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['category_level1_id'], ['events_category_level1.id'], ),
    sa.ForeignKeyConstraint(['category_level2_id'], ['events_category_level2.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_events_event_category_level1_id'), 'events_event', ['category_level1_id'], unique=False)
    op.create_index(op.f('ix_events_event_category_level2_id'), 'events_event', ['category_level2_id'], unique=False)
    op.create_index(op.f('ix_events_event_country_code'), 'events_event', ['country_code'], unique=False)
    op.create_index(op.f('ix_events_event_event_id'), 'events_event', ['event_id'], unique=True)
    op.create_index(op.f('ix_events_event_id'), 'events_event', ['id'], unique=False)
    op.alter_column('user', 'email',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('user', 'hashed_password',
               existing_type=sa.VARCHAR(),
               nullable=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('user', 'hashed_password',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('user', 'email',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_index(op.f('ix_events_event_id'), table_name='events_event')
    op.drop_index(op.f('ix_events_event_event_id'), table_name='events_event')
    op.drop_index(op.f('ix_events_event_country_code'), table_name='events_event')
    op.drop_index(op.f('ix_events_event_category_level2_id'), table_name='events_event')
    op.drop_index(op.f('ix_events_event_category_level1_id'), table_name='events_event')
    op.drop_table('events_event')
    op.drop_index(op.f('ix_events_category_level2_name'), table_name='events_category_level2')
    op.drop_index(op.f('ix_events_category_level2_id'), table_name='events_category_level2')
    op.drop_table('events_category_level2')
    op.drop_index(op.f('ix_events_category_level1_name'), table_name='events_category_level1')
    op.drop_index(op.f('ix_events_category_level1_id'), table_name='events_category_level1')
    op.drop_table('events_category_level1')
    # ### end Alembic commands ###
